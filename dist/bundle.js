!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=1)}([,function(t,e,r){"use strict";r.r(e);class n{constructor(t,e,r,n){this.kapacitet=e,this.id=t,this.iskoriscenost=50,this.temperatura=100,this.power$=r,this.cooling$=n,this.osluskuj()}osluskuj(){this.cooling$.subscribe(t=>{this.promeniHladjenje(t),this.izracunajTemperaturu()})}promeniHladjenje(t){t===this.id?(this.hladjenje++,console.log(`Hladjenje reaktora ${this.id} se povecava`)):(this.hladjenje--,console.log(`Hladjenje reaktora ${this.id} se smanjuje`))}izracunajTemperaturu(){this.temepratura=100+this.kapacitet*this.iskoriscenost/this.hladjenje*10,console.log(`Temperatura reaktora ${this.id} je ${this.temepratura}`)}izracunajIzlaznuSnagu(){return(kapacitet/iskoriscenost).toFixed(2)}}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */var i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)};function o(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function s(t){return"function"==typeof t}var c=!1,a={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;c=t},get useDeprecatedSynchronousErrorHandling(){return c}};function u(t){setTimeout(function(){throw t})}var l={closed:!0,next:function(t){},error:function(t){if(a.useDeprecatedSynchronousErrorHandling)throw t;u(t)},complete:function(){}},h=Array.isArray||function(t){return t&&"number"==typeof t.length};function p(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(t,e){return e+1+") "+t.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}p.prototype=Object.create(Error.prototype);var d=p,b=function(){function t(t){this.closed=!1,this._parent=null,this._parents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}var e;return t.prototype.unsubscribe=function(){var t,e=!1;if(!this.closed){var r=this._parent,n=this._parents,i=this._unsubscribe,o=this._subscriptions;this.closed=!0,this._parent=null,this._parents=null,this._subscriptions=null;for(var c,a=-1,u=n?n.length:0;r;)r.remove(this),r=++a<u&&n[a]||null;if(s(i))try{i.call(this)}catch(r){e=!0,t=r instanceof d?f(r.errors):[r]}if(h(o))for(a=-1,u=o.length;++a<u;){var l=o[a];if(null!==(c=l)&&"object"==typeof c)try{l.unsubscribe()}catch(r){e=!0,t=t||[],r instanceof d?t=t.concat(f(r.errors)):t.push(r)}}if(e)throw new d(t)}},t.prototype.add=function(e){var r=e;switch(typeof e){case"function":r=new t(e);case"object":if(r===this||r.closed||"function"!=typeof r.unsubscribe)return r;if(this.closed)return r.unsubscribe(),r;if(!(r instanceof t)){var n=r;(r=new t)._subscriptions=[n]}break;default:if(!e)return t.EMPTY;throw new Error("unrecognized teardown "+e+" added to Subscription.")}if(r._addParent(this)){var i=this._subscriptions;i?i.push(r):this._subscriptions=[r]}return r},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var r=e.indexOf(t);-1!==r&&e.splice(r,1)}},t.prototype._addParent=function(t){var e=this._parent,r=this._parents;return e!==t&&(e?r?-1===r.indexOf(t)&&(r.push(t),!0):(this._parents=[t],!0):(this._parent=t,!0))},t.EMPTY=((e=new t).closed=!0,e),t}();function f(t){return t.reduce(function(t,e){return t.concat(e instanceof d?e.errors:e)},[])}var y="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),m=function(t){function e(r,n,i){var o=t.call(this)||this;switch(o.syncErrorValue=null,o.syncErrorThrown=!1,o.syncErrorThrowable=!1,o.isStopped=!1,arguments.length){case 0:o.destination=l;break;case 1:if(!r){o.destination=l;break}if("object"==typeof r){r instanceof e?(o.syncErrorThrowable=r.syncErrorThrowable,o.destination=r,r.add(o)):(o.syncErrorThrowable=!0,o.destination=new _(o,r));break}default:o.syncErrorThrowable=!0,o.destination=new _(o,r,n,i)}return o}return o(e,t),e.prototype[y]=function(){return this},e.create=function(t,r,n){var i=new e(t,r,n);return i.syncErrorThrowable=!1,i},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parent,e=this._parents;return this._parent=null,this._parents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parent=t,this._parents=e,this},e}(b),_=function(t){function e(e,r,n,i){var o,c=t.call(this)||this;c._parentSubscriber=e;var a=c;return s(r)?o=r:r&&(o=r.next,n=r.error,i=r.complete,r!==l&&(s((a=Object.create(r)).unsubscribe)&&c.add(a.unsubscribe.bind(a)),a.unsubscribe=c.unsubscribe.bind(c))),c._context=a,c._next=o,c._error=n,c._complete=i,c}return o(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,r=a.useDeprecatedSynchronousErrorHandling;if(this._error)r&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)r?(e.syncErrorValue=t,e.syncErrorThrown=!0):u(t),this.unsubscribe();else{if(this.unsubscribe(),r)throw t;u(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var r=function(){return t._complete.call(t._context)};a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,r),this.unsubscribe()):(this.__tryOrUnsub(r),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),a.useDeprecatedSynchronousErrorHandling)throw t;u(t)}},e.prototype.__tryOrSetError=function(t,e,r){if(!a.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,r)}catch(e){return a.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(u(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(m);var v="function"==typeof Symbol&&Symbol.observable||"@@observable";function E(){}function w(t){return t?1===t.length?t[0]:function(e){return t.reduce(function(t,e){return e(t)},e)}:E}var k=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var r=new t;return r.source=this,r.operator=e,r},t.prototype.subscribe=function(t,e,r){var n=this.operator,i=function(t,e,r){if(t){if(t instanceof m)return t;if(t[y])return t[y]()}return t||e||r?new m(t,e,r):new m(l)}(t,e,r);if(n?i.add(n.call(i,this.source)):i.add(this.source||a.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),a.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){a.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),!function(t){for(;t;){var e=t,r=e.closed,n=e.destination,i=e.isStopped;if(r||i)return!1;t=n&&n instanceof m?n:null}return!0}(t)?console.warn(e):t.error(e)}},t.prototype.forEach=function(t,e){var r=this;return new(e=S(e))(function(e,n){var i;i=r.subscribe(function(e){try{t(e)}catch(t){n(t),i&&i.unsubscribe()}},n,e)})},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[v]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:w(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=S(t))(function(t,r){var n;e.subscribe(function(t){return n=t},function(t){return r(t)},function(){return t(n)})})},t.create=function(e){return new t(e)},t}();function S(t){if(t||(t=a.Promise||Promise),!t)throw new Error("no Promise impl found");return t}function j(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}j.prototype=Object.create(Error.prototype);var g=j,T=function(t){function e(e,r){var n=t.call(this)||this;return n.subject=e,n.subscriber=r,n.closed=!1,n}return o(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var r=e.indexOf(this.subscriber);-1!==r&&e.splice(r,1)}}},e}(b),x=function(t){function e(e){var r=t.call(this,e)||this;return r.destination=e,r}return o(e,t),e}(m),P=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return o(e,t),e.prototype[y]=function(){return new x(this)},e.prototype.lift=function(t){var e=new H(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new g;if(!this.isStopped)for(var e=this.observers,r=e.length,n=e.slice(),i=0;i<r;i++)n[i].next(t)},e.prototype.error=function(t){if(this.closed)throw new g;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,r=e.length,n=e.slice(),i=0;i<r;i++)n[i].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new g;this.isStopped=!0;for(var t=this.observers,e=t.length,r=t.slice(),n=0;n<e;n++)r[n].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new g;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new g;return this.hasError?(t.error(this.thrownError),b.EMPTY):this.isStopped?(t.complete(),b.EMPTY):(this.observers.push(t),new T(this,t))},e.prototype.asObservable=function(){var t=new k;return t.source=this,t},e.create=function(t,e){return new H(t,e)},e}(k),H=function(t){function e(e,r){var n=t.call(this)||this;return n.destination=e,n.source=r,n}return o(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):b.EMPTY},e}(P);const z=document.createElement("div");z.className="container",document.body.appendChild(z);const O=new class{constructor(t,e){this.naziv=t,this.roditelj=e,this.mainSubject$=null,this.cooling$=null,this.reaktori=[],this.reactors=null,this.konzola=null,this.PrikaziKontrolu(),this.PrikaziReaktorPlaceholder()}InicijalizacijaReaktora(){for(let t=0;t<4;t++){const e=Math.random()+1;this.reaktori===[]?this.reaktori.push(new n(t,e.toFixed(1),this.mainSubject$,this.cooling$)):this.reaktori[t]=new n(t,e.toFixed(1),this.mainSubject$,this.cooling$)}}PrikaziKontrolu(){const t=document.createElement("div");t.className="side",this.roditelj.appendChild(t);const e=document.createElement("label");e.innerHTML="Sifra radnika: ",t.appendChild(e);const r=document.createElement("input");r.className="sifraRadnika",t.appendChild(r);const n=document.createElement("div");n.className="dugmici",t.appendChild(n);const i=document.createElement("button");i.innerHTML="Pokreni",i.className="pokreni",i.onclick=(t=>this.pokreniElektranu(t)),n.appendChild(i);const o=document.createElement("button");o.innerHTML="Iskljuci",o.disabled=!0,o.onclick=(t=>this.iskljuciElektranu(t)),o.className="iskljuci",n.appendChild(o),this.konzola=document.createElement("textarea"),this.konzola.className="konzola",t.appendChild(this.konzola)}PrikaziReaktorPlaceholder(){this.reactors=document.createElement("div"),this.reactors.className="reactors",this.roditelj.appendChild(this.reactors)}pokreniElektranu(t){const e=document.querySelector(".sifraRadnika");fetch(`http://localhost:3000/radnici/${e.value}`).then(e=>{e.ok?(this.mainSubject$=new P,this.cooling$=new P,this.InicijalizacijaReaktora(),this.PrikaziReaktore(),t.target.disabled=!0,document.querySelector(".iskljuci").disabled=!1,e.json().then(t=>this.konzola.innerHTML+=`Pokretanje od strane radnika ${t.ime} ${t.prezime} `+"&#13;&#10")):this.konzola.innerHTML+="Doslo je do greske &#13;&#10"}).catch(t=>console.log(t))}iskljuciElektranu(t){t.target.disabled=!0,this.reactors.style.display="none",this.PrikaziReaktorPlaceholder(),document.querySelector(".pokreni").disabled=!1}PrikaziReaktore(){this.reaktori.map((t,e)=>{let r=document.createElement("div");r.className="reactor",this.reactors.appendChild(r),this.PrikaziReaktor(t,r,e)})}PrikaziReaktor(t,e,r){let n=document.createElement("div");n.className="skala",e.appendChild(n);let i=document.createElement("div");i.className="popuna",n.appendChild(i);let o=document.createElement("div");o.className="plusMinus",e.appendChild(o);let s=document.createElement("label");s.innerHTML="Snaga: ",o.appendChild(s);let c=document.createElement("label");c.innerHTML=t.iskoriscenost,c.className="iznos",o.appendChild(c);let a=document.createElement("button");a.value=r,a.innerHTML="+",a.onclick=(t=>this.cooling$.next(t.value)),o.appendChild(a);let u=document.createElement("button");u.value=-r,u.innerHTML="-",u.onclick=(t=>this.cooling$.next(t.value)),o.appendChild(u);let l=document.createElement("div");l.className="plusMinus",e.appendChild(l);let h=document.createElement("label");h.innerHTML="Hladjenje: ",l.appendChild(h);let p=document.createElement("label");p.innerHTML=t.iskoriscenost,p.className="iznos",l.appendChild(p);let d=document.createElement("button");d.innerHTML="+",l.appendChild(d);let b=document.createElement("button");b.innerHTML="-",l.appendChild(b)}}("Cernobil",z);console.log(O)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,